- name: Install Microk8s
  hosts: all
  become: true

  vars:
    microk8s_version: latest

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install snapd
      apt:
        name: snapd
        state: present

    - name: Ensure snapd service is started
      systemd:
        name: snapd
        state: started
        enabled: yes

    - name: Install MicroK8s
      snap:
        name: microk8s
        classic: yes
        channel: "{{ microk8s_version }}"
        state: present

    - name: Refresh MicroK8s certificates
      command: microk8s refresh-certs -e ca.crt

- name: Get and execute join commands
  hosts: master_nodes
  become: true
  tasks:
    - name: Generate and capture join commands for worker nodes
      shell: |
        for i in $(seq 1 {{ groups['worker_nodes'] | length }}); do
          microk8s add-node | grep microk8s | head -2 | tail -1;
        done
      register: microk8s_join_commands
      become: true

    - name: Split join commands into a list
      set_fact:
        microk8s_join_commands_list: "{{ microk8s_join_commands.stdout_lines }}"

- name: Join worker nodes
  hosts: worker_nodes
  become: true
  tasks:
    - name: Join each worker node to the cluster
      command: "{{ hostvars[groups['master_nodes'][0]].microk8s_join_commands_list[play_hosts.index(inventory_hostname)] }}"
      become: true

- name: Configure master node
  hosts: master_nodes
  become: true
  vars:
    microk8s_addons: dns ingress metrics-server cert-manager
    user: "{{ ansible_user_id }}"
    cert_manager_email: someone@something.com
  tasks:
    - name: Enable common MicroK8s addons
      command: microk8s enable {{ microk8s_addons }}

    - name: Display MicroK8s status
      command: microk8s status --wait-ready
      register: microk8s_status

    - debug:
        var: microk8s_status.stdout

    - name: Get kubectl config
      shell: microk8s config > ./kube-config.yaml

    - fetch:
        src: ./kube-config.yaml
        dest: ../kubeconfig/{{ inventory_hostname }}.yaml
        flat: yes

    # Not relying on an external helm chart would be ideal but the below is not working
    #    # Using kubectl for the sake of avoiding helm since that would not only require installing helm and helm diff plugin but also having an external chart... All of which for a single resource
    #    # Installing using the Ansible module kubernetes.core.k8s resulted in: fatal: [node-0]: FAILED! => {"changed": false, "msg": "Failed to import the required Python library (kubernetes) on node-0's Python /usr/bin/python3.10. Please read the module documentation and install it in the appropriate location. If the required library is installed, but Ansible is using the wrong Python interpreter, please consult the documentation on ansible_python_interpreter"}
    #    - name: Install Cert Manager Cluster Issuer using kubectl
    #      shell: |
    #        microk8s kubectl apply -f - <<EOF
    #        apiVersion: cert-manager.io/v1
    #        kind: ClusterIssuer
    #        metadata:
    #          name: cert-issuer
    #        spec:
    #          acme:
    #            email: "{{ cert_manager_email }}"
    #            server: https://acme-v02.api.letsencrypt.org/directory
    #            privateKeySecretRef:
    #              name: cert-issuer-account-key
    #            solvers:
    #              - http01:
- name: Configure cert issuer
  hosts: master_nodes
  become: true
  roles:
    - ../roles/cert-issuer
